#!/bin/bash

export ENABLE_REPLICATION=${ENABLE_REPLICATION:-false}

set -eu
export_vars=$(cgroup-limits) ; export $export_vars

source "${CONTAINER_SCRIPTS_PATH}/common.sh"

# Inject required DB role for MIQ
function set_miq_role() {
  psql --command "ALTER ROLE \"${POSTGRESQL_USER}\" SUPERUSER LOGIN PASSWORD '${POSTGRESQL_PASSWORD}';"
}

# Include MIQ config overrides if directory present
function include_miq_config() {
  # Set and create default dir if POSTGRESQL_CONFIG_DIR is not defined, compatible with older builds
  POSTGRESQL_CONFIG_DIR=${POSTGRESQL_CONFIG_DIR:-/var/lib/pgsql/conf.d}

  # Check for POSTGRESQL_CONFIG_DIR presence in postgresql.conf, if already there skip.
  [[ $(grep ${POSTGRESQL_CONFIG_DIR} ${PGDATA}/postgresql.conf) ]] && RET=$? || RET=$?
  if [[ $RET == "0" ]]; then
    echo "${POSTGRESQL_CONFIG_DIR} already exists on ${PGDATA}/postgresql.conf, skipping.."
  else
   echo "Writing ${POSTGRESQL_CONFIG_DIR} config directory to ${PGDATA}/postgresql.conf"
    cat >> "$PGDATA/postgresql.conf" <<EOF
# Begin ManageIQ configuration overrides:
include_dir '${POSTGRESQL_CONFIG_DIR}'
EOF
  fi
}

set_pgdata
check_env_vars
generate_passwd_file
generate_postgresql_config

if [ ! -f "$PGDATA/postgresql.conf" ]; then
  initialize_database
  NEED_TO_CREATE_USERS=yes
fi

# Include MIQ overrides before first-startup
include_miq_config

pg_ctl -w start -o "-h ''"
if [ "${NEED_TO_CREATE_USERS:-}" == "yes" ]; then
  create_users
fi
set_passwords
set_miq_role
pg_ctl stop

unset_env_vars
exec postgres "$@"
